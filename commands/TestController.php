<?php

namespace app\commands;

use Yii;
use yii\console\Controller;
use app\models\User;
use app\models\Order;
use app\models\OrderItem;
use app\models\OrderHistory;

class TestController extends Controller
{
    /**
     * –°–æ–∑–¥–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã–π –∑–∞–∫–∞–∑ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞
     */
    public function actionCreateTestOrder()
    {
        echo "üß™ –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∑–∞–∫–∞–∑–∞...\n\n";

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        echo "1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:\n";
        $admin = User::findOne(['username' => 'admin']);
        $manager = User::findOne(['username' => 'manager']);
        $logist = User::findOne(['username' => 'logist']);

        echo "   ‚úÖ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä: " . ($admin ? "–Ω–∞–π–¥–µ–Ω (ID: {$admin->id})" : "–ù–ï –ù–ê–ô–î–ï–ù!") . "\n";
        echo "   ‚úÖ –ú–µ–Ω–µ–¥–∂–µ—Ä: " . ($manager ? "–Ω–∞–π–¥–µ–Ω (ID: {$manager->id})" : "–ù–ï –ù–ê–ô–î–ï–ù!") . "\n";
        echo "   ‚úÖ –õ–æ–≥–∏—Å—Ç: " . ($logist ? "–Ω–∞–π–¥–µ–Ω (ID: {$logist->id})" : "–ù–ï –ù–ê–ô–î–ï–ù!") . "\n\n";

        if (!$manager) {
            echo "‚ùå –û–®–ò–ë–ö–ê: –ú–µ–Ω–µ–¥–∂–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω!\n";
            return 1;
        }

        // –°–æ–∑–¥–∞–µ–º –∑–∞–∫–∞–∑
        echo "2. –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞:\n";
        $order = new Order();
        $order->client_name = '–¢–µ—Å—Ç–æ–≤—ã–π –ö–ª–∏–µ–Ω—Ç –ò–≤–∞–Ω–æ–≤–∏—á';
        $order->client_phone = '+375 29 123-45-67';
        $order->client_email = 'test@example.com';
        $order->delivery_date = '20-25 –¥–µ–∫–∞–±—Ä—è 2024';
        $order->created_by = $manager->id;

        if ($order->save()) {
            echo "   ‚úÖ –ó–∞–∫–∞–∑ —Å–æ–∑–¥–∞–Ω:\n";
            echo "      - –ù–æ–º–µ—Ä: {$order->order_number}\n";
            echo "      - –¢–æ–∫–µ–Ω: {$order->token}\n";
            echo "      - ID: {$order->id}\n\n";
        } else {
            echo "   ‚ùå –û–®–ò–ë–ö–ê –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–∫–∞–∑–∞:\n";
            print_r($order->errors);
            return 1;
        }

        // –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–≤–∞—Ä—ã
        echo "3. –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–æ–≤:\n";
        $items = [
            ['–ö—Ä–æ—Å—Å–æ–≤–∫–∏ Nike Air Max', 1, 300.00],
            ['–§—É—Ç–±–æ–ª–∫–∞ Adidas', 2, 50.00],
            ['–†—é–∫–∑–∞–∫ Puma', 1, 120.00],
        ];

        $totalAmount = 0;
        foreach ($items as $index => $itemData) {
            $item = new OrderItem();
            $item->order_id = $order->id;
            $item->product_name = $itemData[0];
            $item->quantity = $itemData[1];
            $item->price = $itemData[2];

            if ($item->save()) {
                echo "   ‚úÖ –¢–æ–≤–∞—Ä " . ($index + 1) . ": {$item->product_name} - {$item->quantity} —à—Ç x {$item->price} BYN = {$item->total} BYN\n";
                $totalAmount += $item->total;
            } else {
                echo "   ‚ùå –û–®–ò–ë–ö–ê –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞:\n";
                print_r($item->errors);
            }
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º –æ–±—â—É—é —Å—É–º–º—É
        $order->total_amount = $totalAmount;
        $order->save(false);
        echo "   üí∞ –ò—Ç–æ–≥–æ–≤–∞—è —Å—É–º–º–∞: {$totalAmount} BYN\n\n";

        // –ù–∞–∑–Ω–∞—á–∞–µ–º –ª–æ–≥–∏—Å—Ç–∞
        if ($logist) {
            echo "4. –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ –ª–æ–≥–∏—Å—Ç–∞:\n";
            $order->assigned_logist = $logist->id;
            $order->save(false);
            echo "   ‚úÖ –õ–æ–≥–∏—Å—Ç –Ω–∞–∑–Ω–∞—á–µ–Ω: {$logist->username}\n\n";
        }

        // –ú–µ–Ω—è–µ–º —Å—Ç–∞—Ç—É—Å
        echo "5. –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞:\n";
        $oldStatus = $order->status;
        $order->status = 'paid';
        $order->save(false);

        $history = new OrderHistory();
        $history->order_id = $order->id;
        $history->old_status = $oldStatus;
        $history->new_status = 'paid';
        $history->comment = '–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ';
        $history->changed_by = $manager->id;
        $history->save();

        echo "   ‚úÖ –°—Ç–∞—Ç—É—Å –∏–∑–º–µ–Ω–µ–Ω: {$oldStatus} ‚Üí paid\n";
        echo "   ‚úÖ –ó–∞–ø–∏—Å—å –≤ –∏—Å—Ç–æ—Ä–∏–∏ —Å–æ–∑–¥–∞–Ω–∞\n\n";

        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø—É–±–ª–∏—á–Ω—É—é —Å—Å—ã–ª–∫—É
        echo "6. –ü—É–±–ª–∏—á–Ω–∞—è —Å—Å—ã–ª–∫–∞:\n";
        $publicUrl = $order->getPublicUrl();
        echo "   üîó {$publicUrl}\n\n";

        // –ò—Ç–æ–≥–æ–≤–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        echo "‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\n";
        echo "‚úÖ –¢–ï–°–¢–û–í–´–ô –ó–ê–ö–ê–ó –°–û–ó–î–ê–ù –£–°–ü–ï–®–ù–û!\n";
        echo "‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\n\n";
        echo "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:\n";
        echo "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n";
        echo "üìã –ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞: {$order->order_number}\n";
        echo "üîë ID –∑–∞–∫–∞–∑–∞: {$order->id}\n";
        echo "üí∞ –°—É–º–º–∞: {$order->total_amount} BYN\n";
        echo "üì¶ –¢–æ–≤–∞—Ä–æ–≤: " . count($order->orderItems) . "\n";
        echo "üë§ –ú–µ–Ω–µ–¥–∂–µ—Ä: {$order->creator->username}\n";
        echo "üöö –õ–æ–≥–∏—Å—Ç: " . ($order->logist ? $order->logist->username : '–ù–µ –Ω–∞–∑–Ω–∞—á–µ–Ω') . "\n";
        echo "üìä –°—Ç–∞—Ç—É—Å: {$order->getStatusLabel()}\n";
        echo "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n";
        echo "üîó –ü—É–±–ª–∏—á–Ω–∞—è —Å—Å—ã–ª–∫–∞ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞:\n";
        echo "   {$publicUrl}\n";
        echo "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n\n";

        echo "–î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤ –∞–¥–º–∏–Ω–∫–µ:\n";
        echo "http://localhost:8080/admin/order/{$order->id}\n\n";

        echo "–î–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:\n";
        echo "1. –°–∫–æ–ø–∏—Ä—É–π—Ç–µ –ø—É–±–ª–∏—á–Ω—É—é —Å—Å—ã–ª–∫—É\n";
        echo "2. –û—Ç–∫—Ä–æ–π—Ç–µ –≤ —Ä–µ–∂–∏–º–µ –∏–Ω–∫–æ–≥–Ω–∏—Ç–æ\n";
        echo "3. –ó–∞–≥—Ä—É–∑–∏—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ–ø–ª–∞—Ç—ã\n";
        echo "4. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞\n\n";

        return 0;
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ —Å–∏—Å—Ç–µ–º—ã
     */
    public function actionCheckSystem()
    {
        echo "üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º—ã...\n\n";

        $checks = [
            '–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö' => $this->checkDatabase(),
            '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏' => $this->checkUsers(),
            '–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è' => $this->checkConfig(),
            'Email —à–∞–±–ª–æ–Ω—ã' => $this->checkEmailTemplates(),
            '–î–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏' => $this->checkDirectories(),
        ];

        foreach ($checks as $name => $result) {
            $status = $result['status'] ? '‚úÖ' : '‚ùå';
            echo "{$status} {$name}: {$result['message']}\n";
        }

        $totalChecks = count($checks);
        $passedChecks = count(array_filter($checks, function($check) {
            return $check['status'];
        }));

        echo "\n‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\n";
        echo "–†–µ–∑—É–ª—å—Ç–∞—Ç: {$passedChecks}/{$totalChecks} –ø—Ä–æ–≤–µ—Ä–æ–∫ –ø—Ä–æ–π–¥–µ–Ω–æ\n";
        echo "‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\n";

        return $passedChecks === $totalChecks ? 0 : 1;
    }

    private function checkDatabase()
    {
        try {
            Yii::$app->db->open();
            $tables = Yii::$app->db->schema->getTableNames();
            $requiredTables = ['user', 'order', 'order_item', 'order_history', 'migration'];
            $found = array_intersect($requiredTables, $tables);
            
            return [
                'status' => count($found) === count($requiredTables),
                'message' => count($found) . '/' . count($requiredTables) . ' —Ç–∞–±–ª–∏—Ü –Ω–∞–π–¥–µ–Ω–æ'
            ];
        } catch (\Exception $e) {
            return ['status' => false, 'message' => $e->getMessage()];
        }
    }

    private function checkUsers()
    {
        $count = User::find()->count();
        $hasAdmin = User::find()->where(['role' => 'admin'])->exists();
        $hasManager = User::find()->where(['role' => 'manager'])->exists();
        $hasLogist = User::find()->where(['role' => 'logist'])->exists();

        $allRoles = $hasAdmin && $hasManager && $hasLogist;

        return [
            'status' => $count >= 3 && $allRoles,
            'message' => "{$count} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –≤—Å–µ —Ä–æ–ª–∏ " . ($allRoles ? '–µ—Å—Ç—å' : '–æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç')
        ];
    }

    private function checkConfig()
    {
        $config = Yii::$app->params;
        $hasStatuses = isset($config['orderStatuses']) && !empty($config['orderStatuses']);
        $hasCompany = isset($config['companyDetails']) && !empty($config['companyDetails']);

        return [
            'status' => $hasStatuses && $hasCompany,
            'message' => '–ü–∞—Ä–∞–º–µ—Ç—Ä—ã ' . ($hasStatuses && $hasCompany ? '–Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã' : '–æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç')
        ];
    }

    private function checkEmailTemplates()
    {
        $templates = [
            Yii::getAlias('@app/mail/order-created.php'),
            Yii::getAlias('@app/mail/payment-uploaded.php'),
            Yii::getAlias('@app/mail/layouts/html.php'),
            Yii::getAlias('@app/mail/layouts/text.php'),
        ];

        $existing = array_filter($templates, 'file_exists');

        return [
            'status' => count($existing) === count($templates),
            'message' => count($existing) . '/' . count($templates) . ' —à–∞–±–ª–æ–Ω–æ–≤ –Ω–∞–π–¥–µ–Ω–æ'
        ];
    }

    private function checkDirectories()
    {
        $dirs = [
            Yii::getAlias('@runtime'),
            Yii::getAlias('@webroot/uploads'),
            Yii::getAlias('@webroot/assets'),
        ];

        $writable = array_filter($dirs, 'is_writable');

        return [
            'status' => count($writable) === count($dirs),
            'message' => count($writable) . '/' . count($dirs) . ' –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π –¥–æ—Å—Ç—É–ø–Ω—ã –¥–ª—è –∑–∞–ø–∏—Å–∏'
        ];
    }
}
